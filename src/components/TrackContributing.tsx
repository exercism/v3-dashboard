import React from 'react'
import { useParams } from 'react-router-dom'

import { useGithubApi } from '../hooks/useGithubApi'
import { useRemoteConfig } from '../hooks/useRemoteConfig'
import { LoadingIndicator } from './LoadingIndicator'

export interface TrackContributingParams {
  trackId: TrackIdentifier
}

export function TrackContributing(): JSX.Element {
  const { trackId } = useParams<TrackContributingParams>()
  const { config, done } = useRemoteConfig(trackId)

  return (
    <div className="d-flex flex-wrap align-items-center mt-4 mb-4 row">
      <div className="col-12 mb-2">
        {done ? <Content config={config} trackId={trackId} /> : <Loading />}
      </div>
    </div>
  )
}

function Loading(): JSX.Element {
  return (
    <div style={{ position: 'relative', display: 'inline-block' }}>
      <button type="button" style={{ background: 0, border: 0 }}>
        <LoadingIndicator />
      </button>
    </div>
  )
}

interface GithubIssueUserData {
  login: string
  avatar_url: string
}

interface GithubIssuePullRequestData {
  html_url: string
}

interface GithubIssueData {
  id: number
  title: string
  number: number
  html_url: string
  user: GithubIssueUserData
  pull_request: GithubIssuePullRequestData
}

interface NewConceptExerciseIssue {
  id: number
  title: string
  url: string
}

function newConceptExerciseIssuesMapper(
  issues: GithubIssueData[]
): NewConceptExerciseIssue[] {
  return issues
    .filter((issue) => !issue.pull_request)
    .map((issue) => ({
      id: issue.id,
      title: issue.title.substr(issue.title.indexOf(':') + 1),
      url: issue.html_url,
    }))
    .sort((a, b) => a.title.localeCompare(b.title))
}

interface ContentProps {
  trackId: string
  config: TrackConfiguration | undefined
}

function Content({ trackId, config }: ContentProps): JSX.Element {
  const asyncNewConceptExerciseIssues = useGithubApi<
    GithubIssueData[],
    NewConceptExerciseIssue[]
  >({
    repository: 'v3',
    path: `issues`,
    params: `labels=track/${trackId},type/new-exercise&state=open`,
    mapper: newConceptExerciseIssuesMapper,
  })

  return (
    <>
      <h2>Contributing to {config?.language} </h2>
      <p>
        On this page you'll find various ways in which you'll be able to
        contribute to {config?.language}
      </p>
      <h3>Exercises that need implementing</h3>
      <p>The following exercise are all open to be worked on</p>

      {asyncNewConceptExerciseIssues.done ? (
        asyncNewConceptExerciseIssues.result?.map((issue) => (
          <NewConceptExerciseToImplement key={issue.id} issue={issue} />
        ))
      ) : (
        <p>TODO: loading indicator</p>
      )}
    </>
  )
}

interface NewConceptExerciseToImplementProps {
  issue: NewConceptExerciseIssue
}

function NewConceptExerciseToImplement({
  issue,
}: NewConceptExerciseToImplementProps): JSX.Element {
  return (
    <div className="card">
      <div className="card-body">
        <h5 className="card-title">{issue.title}</h5>
        <p className="card-text">
          Some quick example text to build on the card title and make up the
          bulk of the card's content.
        </p>
        <a href={issue.url} className="btn btn-primary">
          Go to issue
        </a>
        {/* TODO: add link to new exercise issue with pre-populated data */}
      </div>
    </div>

    /* So intro about the exercise taken from the issue or autogenerated. - Link
      to issue - List of links to exercises on other tracks that have implement
      the exercise
      <a href="Link to Form">Use this form</a> */
  )
}
