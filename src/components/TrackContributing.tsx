import React from 'react'
import { useParams } from 'react-router-dom'

import {
  useNewConceptExerciseIssues,
  NewConceptExerciseIssueSummary,
  useNewConceptExerciseIssue,
} from '../hooks/useNewConceptExerciseIssues'
import { useRemoteConfig } from '../hooks/useRemoteConfig'
import { LoadingIndicator } from './LoadingIndicator'

export interface TrackContributingParams {
  trackId: TrackIdentifier
}

export function TrackContributing(): JSX.Element {
  const { trackId } = useParams<TrackContributingParams>()
  const { config, done } = useRemoteConfig(trackId)

  return (
    <div className="d-flex flex-wrap align-items-center mt-4 mb-4 row">
      <div className="col-12 mb-2">
        {done ? <Content config={config} trackId={trackId} /> : <Loading />}
      </div>
    </div>
  )
}

function Loading(): JSX.Element {
  return (
    <div style={{ position: 'relative', display: 'inline-block' }}>
      <button type="button" style={{ background: 0, border: 0 }}>
        <LoadingIndicator />
      </button>
    </div>
  )
}

interface ContentProps {
  trackId: TrackIdentifier
  config: TrackConfiguration | undefined
}

function Content({ trackId, config }: ContentProps): JSX.Element {
  const asyncNewConceptExerciseIssues = useNewConceptExerciseIssues(trackId)

  return (
    <>
      <h2>Contributing to {config?.language} </h2>
      <p>
        On this page you'll find various ways in which you'll be able to
        contribute to {config?.language}
      </p>
      <h3>Exercises that need implementing</h3>
      <p>The following exercise are all open to be worked on</p>

      {asyncNewConceptExerciseIssues.done ? (
        asyncNewConceptExerciseIssues.result?.map((issue) => (
          <NewConceptExerciseToImplement key={issue.number} issue={issue} />
        ))
      ) : (
        <p>TODO: loading indicator</p>
      )}
    </>
  )
}

interface NewConceptExerciseToImplementProps {
  issue: NewConceptExerciseIssueSummary
}

function NewConceptExerciseToImplement({
  issue,
}: NewConceptExerciseToImplementProps): JSX.Element {
  // TODO: re-enable once caching works
  // const asyncNewConceptExerciseIssue = useNewConceptExerciseIssue(issue.number)
  return (
    <div className="card">
      <div className="card-body">
        <h5 className="card-title">{issue.title}</h5>
        <p className="card-text">TODO</p>
        <p className="card-text">
          <small className="text-muted">{issue.updated_at}</small>
        </p>
        <a href={issue.html_url} className="card-link">
          Go to issue
        </a>
        {/* TODO: add link to new exercise issue with pre-populated data */}
      </div>
    </div>

    /* So intro about the exercise taken from the issue or autogenerated. - Link
      to issue - List of links to exercises on other tracks that have implement
      the exercise
      <a href="Link to Form">Use this form</a> */
  )
}
